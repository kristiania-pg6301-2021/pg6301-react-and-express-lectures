import React, { useEffect, useState } from "react";
import { LoadingView } from "./LoadingView";
import { useHistory } from "react-router";
import {
  authorizationUrl,
  fetchAccessToken,
  randomString,
  sha256,
} from "./authorization";
import { useLoading } from "./useLoading";
import { ErrorView } from "./ErrorView";
import { fetchJson } from "./http";

export function LoginPage() {
  const [errorObject, setErrorObject] = useState();

  const history = useHistory();

  async function startLogin({
    name,
    client_id,
    discovery_url,
    scope,
    use_pkce,
  }) {
    const state = randomString(30);
    if (use_pkce) {
      const code_verifier = randomString(50);
      sessionStorage.setItem(
        "loginState",
        JSON.stringify({
          loginProvider: name,
          discovery_url,
          client_id,
          state,
          code_verifier,
        })
      );
      window.location.href = await authorizationUrl({
        discovery_url,
        client_id,
        scope,
        state,
        response_type: "code",
        response_mode: "fragment",
        code_challenge_method: "S256",
        code_challenge: await sha256(code_verifier),
      });
    } else {
      sessionStorage.setItem(
        "loginState",
        JSON.stringify({ loginProvider: name, discovery_url, client_id, state })
      );
      window.location.href = await authorizationUrl({
        discovery_url,
        client_id,
        scope,
        state,
        response_type: "token",
        response_mode: "fragment",
      });
    }
  }

  async function handleCallback() {
    const loginState = JSON.parse(sessionStorage.getItem("loginState"));
    let hash = Object.fromEntries(
      new URLSearchParams(window.location.hash.substr(1))
    );
    const { access_token, error, error_description, code, state } = hash;
    const {
      loginProvider,
      code_verifier,
      discovery_url,
      client_id,
    } = loginState;

    if (!state) {
      setErrorObject({ error: "Invalid request" });
      return;
    } else if (state !== loginState.state) {
      setErrorObject({
        error: "Invalid request",
        error_description: "Request was not regenerated by application",
      });
      return;
    }

    if (access_token) {
      localStorage.setItem("access_token", access_token);
      localStorage.setItem("loginProvider", loginProvider);
      history.push("/");
    } else if (error) {
      setErrorObject({ error, error_description });
    } else if (code) {
      localStorage.setItem(
        "access_token",
        await fetchAccessToken({
          discovery_url,
          client_id,
          code,
          code_verifier,
        })
      );
      localStorage.setItem("loginProvider", loginProvider);
      history.push("/");
    } else {
      console.warn("Unhandled hash", hash);
    }
  }

  useEffect(async function () {
    if (window.location.hash !== "") {
      await handleCallback();
    }
  }, []);

  if (errorObject) {
    const { error, error_description } = errorObject;
    return (
      <div>
        <h1>An error occurred: {error}</h1>
        {error_description && <div>{error_description}</div>}
      </div>
    );
  }

  if (window.location.hash !== "") {
    return <div>Handling callback</div>;
  }

  return <LoginForm startLogin={startLogin} />;
}

function LoginForm({ startLogin }) {
  const { data: loginOptions, loading, error } = useLoading(() =>
    fetchJson("https://webapps.kristiania.no:3000/api/loginProviders")
  );

  if (error) {
    return <ErrorView error={error} />;
  }
  if (loading) {
    return <LoadingView />;
  }

  return (
    <div>
      {loginOptions
        .filter(({ client_id }) => !!client_id)
        .map(({ name, client_id, discovery_url, scope, use_pkce }) => (
          <button
            key={name}
            onClick={() =>
              startLogin({ name, client_id, discovery_url, scope, use_pkce })
            }
          >
            Login with {name}
          </button>
        ))}
    </div>
  );
}
